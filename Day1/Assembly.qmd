---
title: "Assembly"
format: html
---

# SPAdes Assembly (Single K-mer)

### Basic assembly with automatic k-mer selection

`spades.py-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_spades_auto--careful-t 4-m 8`

### View assembly statistics

`cat /home/ubuntu/analysis/assembly/sample1_spades_auto/scaffolds.fasta`

# SPAdes Assembly (Specific K-mer)

### Assembly with specific k-mer value

`spades.py-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-k 21,33,55,77-o /home/ubuntu/analysis/assembly/sample1_spades_k77--careful-t 4-m 8`

**K-mer selection guidelines:**

-   Smaller k-mers (21-33): better for low coverage, shorter contigs

-   Larger k-mers (55-99): better for high coverage, more contiguous

-   Multiple k-mers: SPAdes uses all and picks best

# Unicycler Hybrid Assembly

### Hybrid assembly (short + long reads)

`unicycler-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-l sample1_nanopore.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_unicycler-t 4`

### Short-read only mode (for comparison)

`unicycler-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_unicycler_short-t 4`

# Assembly Quality Assessment

### QUAST - comprehensive quality metrics

`quast.py/home/ubuntu/analysis/assembly/sample1_spades_auto/scaffolds.fasta/home/ubuntu/analysis/assembly/sample1_spades_k77/scaffolds.fasta/home/ubuntu/analysis/assembly/sample1_unicycler/assembly.fasta-o /home/ubuntu/analysis/assembly/quast_comparison-r /home/ubuntu/Reference/Saureus_reference.fasta-g /home/ubuntu/Reference/Saureus_reference.gff--threads 4`

### View report

`firefox /home/ubuntu/analysis/assembly/quast_comparison/report.html`

Key QUAST metrics:

**Number of contigs**: Lower is better (fewer breaks)

**Largest contig**: Should be \~2-3 Mb for chromosome

**Total length**: Should be \~2.8 Mb for *S. aureus*

**N50**: Higher is better (longer contigs)

**L50**: Lower is better (fewer contigs contain 50% of assembly)

### BUSCO - check genome completeness

`busco-i /home/ubuntu/analysis/assembly/sample1_unicycler/assembly.fasta-o sample1_busco-m genome-l bacteria_odb10--cpu 4`

BUSCO interpretation:

Complete: \>95% is excellent

Fragmented: \<5% is good

Missing: \<5% is acceptable

### Quick Assembly Statistics

### Simple assembly stats script

`assembly_stats() { echo "Assembly: $1" echo "Number of contigs:" grep -c ">" $1 echo "Total length:" grep -v ">" $1 | tr -d '\n' | wc -c echo "Largest contig:" grep -v ">" $1 | awk '{print length}' | sort -rn | head -1 }`

### Use the function

`assembly_stats /home/ubuntu/analysis/assembly/sample1_spades_auto/scaffolds.fasta`

# Visualize Assembly Graph (Optional)

### View assembly graph in Bandage

`Bandage load /home/ubuntu/analysis/assembly/sample1_spades_auto/assembly_graph.fastg`

Comparing Multiple Assemblies

Create a comparison table

`echo -e "Assembly\tContigs\tTotal_Length\tN50\tLargest_Contig" > assembly_comparison.txt`

`for assembly in /home/ubuntu/analysis/assembly/*/scaffolds.fasta;`

`do name=$(basename $(dirname $assembly))
    contigs=$(grep -c ">" $assembly)
    total=$(grep -v ">" $assembly | tr -d '\n' | wc -c)
    echo -e "$name\t$contigs\t$total\t-\t-" >> assembly_comparison.txt done`

`column -t assembly_comparison.txt`

### Troubleshooting

Issue: SPAdes fails with memory error: Reduce memory usage by using **--memory flag**

`spades.py -1 R1.fastq.gz -2 R2.fastq.gz -o output --careful -t 2 -m 4`

Issue: Too many contigs (\>200)

Coverage might be too low; Try larger k-mer values; Check for contamination Issue:

Assembly too small/large

Check reference genome size

Verify species identification with Mash Look for contamination
