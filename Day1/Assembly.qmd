---
title: "Assembly"
format: html
---

# SPAdes Assembly (Single K-mer)

### Basic assembly with automatic k-mer selection

`spades.py-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_spades_auto--careful-t 4-m 8`

### View assembly statistics

`cat /home/ubuntu/analysis/assembly/sample1_spades_auto/scaffolds.fasta`

# SPAdes Assembly (Specific K-mer)

| Common Flags | Meaning | Example | Description |
|----|----|----|----|
| `-t` | **Number of CPU threads** | `-t 4` | Tells SPAdes to use 4 CPU cores for parallel processing. Use more threads if your machine has more cores (e.g., `-t 8` or `-t 16`). |
| `-m` | **Maximum memory (in GB)** | `-m 8` | Limits SPAdes to use at most 8 GB of RAM. This prevents it from using too much system memory. |

### Assembly with specific k-mer value

\~ Divide in groups and run SPAdes on one sample, with different k-mer sizes (`21,33,55 or 77)`

Replace K-MER in the command below with one of the values **21,33,55 or 77**

General command:

`spades.py-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-k K-MER-o /home/ubuntu/output--careful-t 4-m 8`

Eg (this will take around 20 minutes to run!)

`cd /home/ubuntu/Data/G18252308/illumina`

`spades -1 ERR4635696_1.fastq.gz -2 ERR4635696_2.fastq.gz -k 21 -o ../../Assembly --careful -t 4 -m 8`

**K-mer selection guidelines:**

-   Smaller k-mers (21-33): better for low coverage, shorter contigs

-   Larger k-mers (55-99): better for high coverage, more contiguous

-   Multiple k-mers: SPAdes uses all and picks best

# Unicycler Hybrid Assembly

(We will not run this in the classroom)

### Hybrid assembly (short + long reads)

`unicycler-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-l sample1_nanopore.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_unicycler-t 4`

### Short-read only mode (for comparison)

`unicycler-1 sample1_1.clean.fastq.gz-2 sample1_2.clean.fastq.gz-o /home/ubuntu/analysis/assembly/sample1_unicycler_short-t 4`

# Assembly Quality Assessment

### QUAST - comprehensive quality metrics

`quast.py/home/ubuntu/analysis/assembly/sample1_spades_auto/scaffolds.fasta/home/ubuntu/analysis/assembly/sample1_spades_k77/scaffolds.fasta/home/ubuntu/analysis/assembly/sample1_unicycler/assembly.fasta-o /home/ubuntu/analysis/assembly/quast_comparison-r /home/ubuntu/Reference/Saureus_reference.fasta-g /home/ubuntu/Reference/Saureus_reference.gff--threads 4`

### View report

Key QUAST metrics:

**Number of contigs**: Lower is better (fewer breaks)

**Largest contig**: Should be \~2-3 Mb for chromosome

**Total length**: Should be \~2.8 Mb for *S. aureus*

**N50**: Higher is better (longer contigs)

**L50**: Lower is better (fewer contigs contain 50% of assembly)

### Quick Assembly Statistics

### Simple assembly stats script

`cd /home/ubuntu/Data/Assembly/`

`cat assemblystats.sh`

Try running this:

`bash assemblystats.sh kmer21/contigs.fasta`

`bash assemblystats.sh ENA_assembly/SAMEA5818231.fa`

***Compare your data with your colleagues that chose a different K-mer size***

### Troubleshooting

Issue: SPAdes fails with memory error: Reduce memory usage by using **--memory flag**

`spades.py -1 R1.fastq.gz -2 R2.fastq.gz -o output --careful -t 2 -m 4`

Issue: Too many contigs (\>200)

Coverage might be too low; Try larger k-mer values; Check for contamination Issue:

Assembly too small/large

Check reference genome size

Verify species identification with Mash Look for contamination
